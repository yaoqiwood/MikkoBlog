name: Deploy to Server

on:
  push:
    branches:
      - cicd-deploy
  workflow_dispatch: # 允许手动触发

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test SSH connection
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        command_timeout: 2m
        script: |
          echo "🔗 测试SSH连接..."
          echo "服务器信息: $(uname -a)"
          echo "Docker版本: $(docker --version)"
          echo "Docker Compose版本: $(docker compose --version)"
          echo "Git版本: $(git --version)"

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        command_timeout: 30m
        script: |
          # 进入项目目录
          cd ${{ secrets.PROJECT_PATH }}

          # 确保部署脚本有执行权限
          chmod +x github-deploy.sh

          # 执行部署脚本
          echo "🚀 开始执行部署脚本..."
          ./github-deploy.sh

    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        command_timeout: 5m
        script: |
          cd ${{ secrets.PROJECT_PATH }}

          echo "🔍 验证部署结果..."

          # 检查Docker容器状态
          echo "Docker 容器状态："
          docker compose -f docker-compose.prod.yml ps

          # 等待服务启动
          echo "等待服务启动..."
          sleep 30

          # 检查服务健康状态（重试机制）
          echo "检查服务健康状态..."
          RETRY_COUNT=0
          MAX_RETRIES=6

          # 检查后端API
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f http://localhost:8000/api/healthz 2>/dev/null; then
              echo "✅ 后端API健康检查通过"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "⏳ 重试后端健康检查 ($RETRY_COUNT/$MAX_RETRIES)..."
              sleep 10
            fi
          done

          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "❌ 后端API健康检查失败"
            echo "查看后端日志："
            docker compose -f docker-compose.prod.yml logs --tail=50 backend
            exit 1
          fi

          # 检查前端
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f http://localhost 2>/dev/null; then
              echo "✅ 前端服务健康检查通过"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "⏳ 重试前端健康检查 ($RETRY_COUNT/$MAX_RETRIES)..."
              sleep 10
            fi
          done

          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "❌ 前端服务健康检查失败"
            exit 1
          fi

          echo "🎉 部署验证完成！"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ 部署成功！"
          echo "🌐 前端地址: http://${{ secrets.SERVER_HOST }}"
          echo "🔧 后端API: http://${{ secrets.SERVER_HOST }}:8000"
        else
          echo "❌ 部署失败！"
          echo "请检查服务器日志和GitHub Actions日志"
        fi
